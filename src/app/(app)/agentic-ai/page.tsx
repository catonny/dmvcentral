
"use client";

import * as React from "react";
import { collection, query, where, getDocs } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { useAuth } from "@/hooks/use-auth";
import type { Employee } from "@/lib/data";
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, ArrowRight, Bot, Mail, Users, CalendarCheck2, FileText, ReceiptText } from "lucide-react";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";

const ActionCard = ({ title, description, icon: Icon, onClick, isDisabled = false }: { title: string, description: string, icon: React.ElementType, onClick: () => void, isDisabled?: boolean }) => (
  <Card
    className={cn(
        "transition-all group",
        isDisabled ? "cursor-not-allowed bg-muted/50" : "cursor-pointer hover:border-primary/80 hover:shadow-primary/20"
    )}
    onClick={isDisabled ? undefined : onClick}
  >
    <CardHeader>
      <div className="flex justify-between items-start">
        <div>
          <CardTitle className="flex items-center gap-3 text-xl">
            <Icon className={cn("h-6 w-6", isDisabled ? "text-muted-foreground" : "text-primary")} />
            {title}
          </CardTitle>
          <CardDescription className="mt-2">{description}</CardDescription>
        </div>
         <div className="flex flex-col items-end gap-2">
             <ArrowRight className="h-5 w-5 text-muted-foreground group-hover:translate-x-1 transition-transform" />
        </div>
      </div>
    </CardHeader>
  </Card>
);

const agents = [
    {
        title: "Email Processor",
        description: "Analyzes incoming emails, links them to clients, summarizes content, and determines the audience.",
        icon: Mail,
        path: "/agentic-ai/email-center"
    },
    {
        title: "Engagement Scheduler",
        description: "Intelligently schedules and assigns new engagements in bulk based on natural language commands.",
        icon: Users,
        path: "/administration/scheduler"
    },
    {
        title: "Leave Request Handler",
        description: "Identifies calendar conflicts for approved leave and suggests replacement colleagues.",
        icon: CalendarCheck2,
        path: "#" // Not an interactive page
    },
    {
        title: "Invoice Generator",
        description: "Automates the creation of professional HTML invoices for completed engagements.",
        icon: ReceiptText,
        path: "/administration/billing"
    },
    {
        title: "Email Generator",
        description: "Generates templated emails (e.g., onboarding, fee revision) to clients with personalized details.",
        icon: Mail,
        path: "/administration/email-center"
    },
    {
        title: "Email Sending Service",
        description: "A background agent that handles the delivery of emails generated by other agents.",
        icon: Bot,
        path: "#" // Not an interactive page
    }
]


export default function AgenticAIPage() {
    const { user, loading: authLoading } = useAuth();
    const [hasAccess, setHasAccess] = React.useState(false);
    const [loading, setLoading] = React.useState(true);
    const router = useRouter();
    
    React.useEffect(() => {
        if (authLoading) return;
        if (!user) {
            setLoading(false);
            return;
        }

        const checkUserRole = async () => {
            const employeeQuery = query(collection(db, "employees"), where("email", "==", user.email));
            const employeeSnapshot = await getDocs(employeeQuery);
            if (!employeeSnapshot.empty) {
                const employeeData = employeeSnapshot.docs[0].data() as Employee;
                if (employeeData.role.includes("Admin")) {
                    setHasAccess(true);
                }
            }
            setLoading(false);
        };
        checkUserRole();
    }, [user, authLoading]);

    if (loading) {
        return (
            <div className="flex h-full w-full items-center justify-center">
                <Loader2 className="h-8 w-8 animate-spin" />
            </div>
        );
    }
    
    if (!hasAccess) {
        return (
            <Card>
                <CardHeader><CardTitle>Access Denied</CardTitle></CardHeader>
                <CardDescription>You do not have the required permissions to view this page.</CardDescription>
            </Card>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                <div>
                    <h2 className="text-3xl font-bold tracking-tight font-headline">Agentic AI Hub</h2>
                    <p className="text-muted-foreground">
                        Manage and interact with the firm's autonomous agents.
                    </p>
                </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {agents.map(agent => (
                     <ActionCard 
                        key={agent.title}
                        title={agent.title}
                        description={agent.description}
                        icon={agent.icon}
                        onClick={() => agent.path !== "#" && router.push(agent.path)}
                        isDisabled={agent.path === "#"}
                    />
                ))}
            </div>
        </div>
    )
}
